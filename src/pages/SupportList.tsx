// pages/SupportList.tsx
import React, { useEffect, useState } from 'react';
import styled from 'styled-components';
import axios from 'axios';
import { Logo } from '../Components/Logo/Logo';
import { useNavigate } from "react-router-dom";

const PageContainer = styled.div`
  min-height: 100vh;
  background-color: #FFEFD5;
  padding: 5px 0;
`;

const Header = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: flex-start;
  margin-bottom: 5px;
  padding: 0 10px;
  max-width: 1400px;
  margin: 0 auto 5px auto;
  
  @media (max-width: 1024px) {
    max-width: 95%;
    margin-bottom: 3px;
    padding: 0 15px;
  }
  
  @media (max-width: 768px) {
    margin-bottom: 2px;
    padding: 0 10px;
  }
  
  @media (max-width: 480px) {
    margin-bottom: 1px;
    padding: 0 5px;
  }
`;

const LogoContainer = styled.div`
  margin-top: 2px;
  margin-bottom: -50px;
  
  @media (max-width: 768px) {
    margin-top: 1px;
  }
  
  @media (max-width: 480px) {
    margin-top: 1px;
  }
`;

const HeaderTitle = styled.h1`
  font-size: 25px;
  font-weight: 700;
  color: #333;
  margin: 15px 0 0 40px;
  text-align: left;
  
  @media (max-width: 1024px) {
    font-size: 28px;
    margin: 12px 0 0 40px;
  }
  
  @media (max-width: 768px) {
    font-size: 24px;
    margin: 10px 0 0 40px;
  }
  
  @media (max-width: 480px) {
    font-size: 22px;
    margin: 8px 0 0 50px;
  }
`;

const ContentWrapper = styled.div`
  background-color: #FFEFD5;
  border-radius: 16px;
  padding: 60px;
  max-width: 1000px;
  margin: 0 auto 40px auto;
  
  @media (max-width: 1024px) {
    max-width: 90%;
    padding: 40px 30px;
    margin: 0 auto;
  }
  
  @media (max-width: 768px) {
    padding: 30px 30px ;
    margin: 0 40px;
  }
  
  @media (max-width: 480px) {
    padding: 25px 15px;
    margin: 0 5px;
  }
`;

const LoadingContainer = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 300px;
  font-size: 18px;
  color: #666;
`;

const ErrorContainer = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  min-height: 300px;
  font-size: 16px;
  color: #e74c3c;
  text-align: center;
  
  button {
    margin-top: 15px;
    padding: 10px 20px;
    background-color: #FBBF77;
    color: white;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 14px;
    
    &:hover {
      background-color: #E6AB65;
    }
  }
`;

const TableContainer = styled.div`
  width: 100%;
  overflow-x: auto;
  border-radius: 12px;
  overflow: hidden;
  border: 2px solid #ddd;
`;

const Table = styled.table`
  width: 100%;
  border-collapse: collapse;
  font-size: 16px;
  
  @media (max-width: 768px) {
    font-size: 14px;
  }
  
  @media (max-width: 480px) {
    font-size: 12px;
  }
`;

const TableHeader = styled.thead`
  background-color: #FBBF77;
`;

const TableHeaderRow = styled.tr``;

const TableHeaderCell = styled.th`
  padding: 15px 10px;
  text-align: center;
  font-weight: 600;
  color: #333;
  border-right: 1px solid #bbb;
  
  &:last-child {
    border-right: none;
  }
  
  @media (max-width: 768px) {
    padding: 12px 8px;
  }
  
  @media (max-width: 480px) {
    padding: 10px 6px;
  }
`;

const TableBody = styled.tbody``;

const TableRow = styled.tr`
  background-color: white;
  border-bottom: 1px solid #eee;
  cursor: pointer;
  transition: background-color 0.2s ease;
  
  &:hover {
    background-color: #f9f9f9;
  }
  
  &:last-child {
    border-bottom: none;
  }
`;

const TableCell = styled.td`
  padding: 15px 10px;
  text-align: center;
  color: #555;
  border-right: 1px solid #eee;
  
  &:last-child {
    border-right: none;
  }
  
  &:nth-child(2) {
    text-align: left;
    padding-left: 15px;
    max-width: 400px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  
  @media (max-width: 768px) {
    padding: 12px 8px;
    
    &:nth-child(2) {
      padding-left: 12px;
      max-width: 250px;
    }
  }
  
  @media (max-width: 480px) {
    padding: 10px 6px;
    
    &:nth-child(2) {
      padding-left: 10px;
      max-width: 150px;
    }
  }
`;

const LinkCell = styled(TableCell)`
  color: #007bff;
  text-decoration: underline;
  
  &:hover {
    color: #0056b3;
  }
`;

const PaginationContainer = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 30px;
  gap: 8px;
`;

const PaginationButton = styled.button<{ active?: boolean }>`
  width: 35px;
  height: 35px;
  border: 1px solid #ddd;
  background-color: ${props => props.active ? '#FBBF77' : 'white'};
  color: ${props => props.active ? 'white' : '#333'};
  border-radius: 50%;
  cursor: pointer;
  font-size: 14px;
  font-weight: 500;
  transition: all 0.2s ease;
  
  &:hover {
    background-color: ${props => props.active ? '#E6AB65' : '#f5f5f5'};
  }
  
  &:disabled {
    cursor: not-allowed;
    opacity: 0.5;
  }
`;

const ArrowButton = styled(PaginationButton)`
  border-radius: 8px;
`;

const RefreshButton = styled.button`
  margin-bottom: 20px;
  padding: 8px 16px;
  background-color: #FBBF77;
  color: white;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-size: 14px;
  transition: background-color 0.2s ease;
  
  &:hover {
    background-color: #E6AB65;
  }
  
  &:disabled {
    background-color: #ccc;
    cursor: not-allowed;
  }
`;

const StatusInfo = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
  padding: 10px 15px;
  background-color: #f8f9fa;
  border-radius: 8px;
  font-size: 14px;
  color: #666;
  
  @media (max-width: 768px) {
    flex-direction: column;
    gap: 5px;
    text-align: center;
  }
`;

// üî• ÌÉÄÏûÖ Ï†ïÏùò
interface Project {
  title: string;
  link: string;
}

interface SupportData {
  id: number;
  title: string;
  link: string;
  date: string;
  source: string;
}

// üî• API ÏÑ§Ï†ï
const API_BASE_URL = 'http://localhost:8000';

// Axios Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
const apiClient = axios.create({
  baseURL: API_BASE_URL,
  timeout: 10000, // 10Ï¥à ÌÉÄÏûÑÏïÑÏõÉ
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
  },
});

// üî• API Ìï®Ïàò
const fetchOngoingProjects = async (): Promise<Project[]> => {
  try {
    console.log('üîÑ ÏÑ∏ÎØ∏ÎÇò/ÌñâÏÇ¨ Ï†ïÎ≥¥ Ï°∞Ìöå ÏãúÏûë...');
    
    const response = await apiClient.get('/rda/ongoing-projects');
    
    console.log('API ÏùëÎãµ ÏÉÅÌÉú:', response.status);
    console.log('API ÏùëÎãµ Îç∞Ïù¥ÌÑ∞:', response.data);
    
    if (response.status === 200 && Array.isArray(response.data)) {
      console.log('‚úÖ ÏÑ∏ÎØ∏ÎÇò/ÌñâÏÇ¨ Ï†ïÎ≥¥ Ï°∞Ìöå ÏÑ±Í≥µ:', response.data.length, 'Í±¥');
      return response.data;
    } else {
      console.warn('‚ùå ÏòàÏÉÅÍ≥º Îã§Î•∏ ÏùëÎãµ ÌòïÏãù:', response.data);
      throw new Error('Invalid response format');
    }
  } catch (error) {
    console.error('‚ùå ÏÑ∏ÎØ∏ÎÇò/ÌñâÏÇ¨ Ï†ïÎ≥¥ Ï°∞Ìöå Ïã§Ìå®:', error);
    
    if (axios.isAxiosError(error)) {
      if (error.code === 'ECONNABORTED') {
        throw new Error('ÏöîÏ≤≠ ÏãúÍ∞ÑÏù¥ Ï¥àÍ≥ºÎêòÏóàÏäµÎãàÎã§.');
      } else if (error.response) {
        throw new Error(`ÏÑúÎ≤Ñ Ïò§Î•ò: ${error.response.status}`);
      } else if (error.request) {
        throw new Error('ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞Ìï† Ïàò ÏóÜÏäµÎãàÎã§.');
      }
    }
    
    throw new Error('Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
  }
};

// üî• Î™©ÏóÖ Îç∞Ïù¥ÌÑ∞ (Î∞±ÏóîÎìú Ïó∞Í≤∞ Ïã§Ìå® Ïãú ÏÇ¨Ïö©)
const getMockData = (): SupportData[] => {
  console.log('üìã Î™©ÏóÖ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©');
  return [
    {
      id: 1,
      title: 'Ïä§ÎßàÌä∏ ÎÜçÏóÖ ÌòÑÏû• Î¨∏Ï†úÏ†ê Ï∞æÏïÑ ÏßÄÏõêÍ∏à ÏßÄÏõê ÏÑ∏ÎØ∏ÎÇò',
      link: 'https://www.rda.go.kr/example1',
      date: '25.06.02',
      source: 'ÎÜçÏ¥åÏßÑÌù•Ï≤≠'
    },
    {
      id: 2,
      title: 'ÎîîÏßÄÌÑ∏ ÎÜçÏóÖ Í∏∞Ïà† ÍµêÏú° ÌîÑÎ°úÍ∑∏Îû® ÏïàÎÇ¥',
      link: 'https://www.rda.go.kr/example2',
      date: '25.06.01',
      source: 'ÎÜçÏ¥åÏßÑÌù•Ï≤≠'
    },
    {
      id: 3,
      title: 'ÏπúÌôòÍ≤Ω ÎÜçÏóÖ ÏßÄÏõê ÏÇ¨ÏóÖ ÏÑ§Î™ÖÌöå',
      link: 'https://www.rda.go.kr/example3',
      date: '25.05.30',
      source: 'ÎÜçÏ¥åÏßÑÌù•Ï≤≠'
    },
    {
      id: 4,
      title: 'ÎÜçÏóÖÏù∏ Ï∞ΩÏóÖ ÏßÄÏõê ÌîÑÎ°úÍ∑∏Îû®',
      link: 'https://www.rda.go.kr/example4',
      date: '25.05.29',
      source: 'ÎÜçÏ¥åÏßÑÌù•Ï≤≠'
    },
    {
      id: 5,
      title: 'ÎÜçÏûëÎ¨º Î≥ëÌï¥Ï∂© Î∞©Ï†ú Í∏∞Ïà† ÏÑ∏ÎØ∏ÎÇò',
      link: 'https://www.rda.go.kr/example5',
      date: '25.05.28',
      source: 'ÎÜçÏ¥åÏßÑÌù•Ï≤≠'
    }
  ];
};

export const SupportList: React.FC = () => {
  const navigate = useNavigate();
  
  // üî• ÏÉÅÌÉú Í¥ÄÎ¶¨
  const [supportData, setSupportData] = useState<SupportData[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);
  
  // üî• ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò ÏÉÅÌÉú
  const [currentPage, setCurrentPage] = useState<number>(1);
  const itemsPerPage = 10;
  
  // üî• Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ìï®Ïàò
  const loadSupportData = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const projects = await fetchOngoingProjects();
      
      // Project[] ÌòïÏãùÏùÑ SupportData[] ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
      const transformedData: SupportData[] = projects.map((project, index) => ({
        id: index + 1,
        title: project.title,
        link: project.link,
        date: new Date().toLocaleDateString('ko-KR', {
          year: '2-digit',
          month: '2-digit',
          day: '2-digit'
        }).replace(/\./g, '.').replace(/ /g, ''),
        source: 'ÎÜçÏ¥åÏßÑÌù•Ï≤≠'
      }));
      
      setSupportData(transformedData);
      setLastUpdated(new Date());
      
      console.log('‚úÖ ÏßÄÏõê Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å:', transformedData.length, 'Í±¥');
    } catch (err) {
      console.error('‚ùå Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', err);
      setError(err instanceof Error ? err.message : 'Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.');
      
      // ÏóêÎü¨ Î∞úÏÉù Ïãú Î™©ÏóÖ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
      setSupportData(getMockData());
      setLastUpdated(new Date());
    } finally {
      setLoading(false);
    }
  };
  
  // üî• Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  useEffect(() => {
    loadSupportData();
  }, []);
  
  // üî• ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò Í≥ÑÏÇ∞
  const totalPages = Math.ceil(supportData.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const currentItems = supportData.slice(startIndex, endIndex);
  
  // üî• Ìñâ ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨
  const handleRowClick = (item: SupportData) => {
    if (item.link && item.link.startsWith('http')) {
      // Ïô∏Î∂Ä ÎßÅÌÅ¨Ïù∏ Í≤ΩÏö∞ ÏÉà ÌÉ≠ÏóêÏÑú Ïó¥Í∏∞
      window.open(item.link, '_blank', 'noopener,noreferrer');
      console.log('üîó Ïô∏Î∂Ä ÎßÅÌÅ¨ Ïó¥Í∏∞:', item.link);
    } else {
      // ÎÇ¥Î∂Ä ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
      navigate('/SupportDetail', { state: { supportItem: item } });
      console.log('üìÑ ÎÇ¥Î∂Ä ÌéòÏù¥ÏßÄ Ïù¥Îèô:', item.title);
    }
  };
  
  // üî• ÌéòÏù¥ÏßÄ Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨
  const handlePageChange = (page: number) => {
    setCurrentPage(page);
    console.log('üìÑ ÌéòÏù¥ÏßÄ Î≥ÄÍ≤Ω:', page);
  };
  
  // üî• ÏÉàÎ°úÍ≥†Ïπ® Ìï∏Îì§Îü¨
  const handleRefresh = () => {
    console.log('üîÑ Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®');
    loadSupportData();
  };

  return (
    <PageContainer>
      <Header>
        <LogoContainer>
          <Logo />
        </LogoContainer>
        <HeaderTitle>ÏßÄÏõêÍ∏à Î∞è ÏÑ∏ÎØ∏ÎÇò</HeaderTitle>
      </Header>
      
      <ContentWrapper>
        {/* üî• ÏÉÅÌÉú Ï†ïÎ≥¥ Î∞è ÏÉàÎ°úÍ≥†Ïπ® Î≤ÑÌäº */}
        <StatusInfo>
          <div>
            Ï¥ù {supportData.length}Í±¥Ïùò ÏÑ∏ÎØ∏ÎÇò/ÌñâÏÇ¨ Ï†ïÎ≥¥ 
            {lastUpdated && (
              <span style={{ marginLeft: '10px', fontSize: '12px' }}>
                (ÎßàÏßÄÎßâ ÏóÖÎç∞Ïù¥Ìä∏: {lastUpdated.toLocaleTimeString('ko-KR')})
              </span>
            )}
          </div>
          <RefreshButton onClick={handleRefresh} disabled={loading}>
            {loading ? 'ÏÉàÎ°úÍ≥†Ïπ® Ï§ë...' : 'üîÑ ÏÉàÎ°úÍ≥†Ïπ®'}
          </RefreshButton>
        </StatusInfo>
        
        {/* üî• ÏóêÎü¨ ÏÉÅÌÉú */}
        {error && (
          <ErrorContainer>
            <div>‚ö†Ô∏è {error}</div>
            <div style={{ fontSize: '14px', marginTop: '5px' }}>
              Î™©ÏóÖ Îç∞Ïù¥ÌÑ∞Î°ú ÌëúÏãúÎê©ÎãàÎã§.
            </div>
            <button onClick={handleRefresh}>Îã§Ïãú ÏãúÎèÑ</button>
          </ErrorContainer>
        )}
        
        {/* üî• Î°úÎî© ÏÉÅÌÉú */}
        {loading ? (
          <LoadingContainer>
            üîÑ ÏÑ∏ÎØ∏ÎÇò/ÌñâÏÇ¨ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...
          </LoadingContainer>
        ) : (
          <>
            {/* üî• ÌÖåÏù¥Î∏î */}
            <TableContainer>
              <Table>
                <TableHeader>
                  <TableHeaderRow>
                    <TableHeaderCell>Î≤àÌò∏</TableHeaderCell>
                    <TableHeaderCell>Ï†úÎ™©</TableHeaderCell>
                    <TableHeaderCell>Ï∂úÏ≤ò</TableHeaderCell>
                    <TableHeaderCell>Îì±Î°ùÏùº</TableHeaderCell>
                  </TableHeaderRow>
                </TableHeader>
                <TableBody>
                  {currentItems.length > 0 ? (
                    currentItems.map((item) => (
                      <TableRow key={item.id} onClick={() => handleRowClick(item)}>
                        <TableCell>{startIndex + currentItems.indexOf(item) + 1}</TableCell>
                        <TableCell title={item.title}>{item.title}</TableCell>
                        <TableCell>{item.source}</TableCell>
                        <TableCell>{item.date}</TableCell>
                      </TableRow>
                    ))
                  ) : (
                    <TableRow>
                      <TableCell colSpan={4} style={{ textAlign: 'center', padding: '40px' }}>
                        ÌëúÏãúÌï† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </TableContainer>
            
            {/* üî• ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò */}
            {totalPages > 1 && (
              <PaginationContainer>
                <ArrowButton 
                  onClick={() => handlePageChange(Math.max(1, currentPage - 1))}
                  disabled={currentPage === 1}
                >
                  ‚Üê
                </ArrowButton>
                
                {Array.from({ length: Math.min(7, totalPages) }, (_, i) => {
                  let pageNum;
                  if (totalPages <= 7) {
                    pageNum = i + 1;
                  } else if (currentPage <= 4) {
                    pageNum = i + 1;
                  } else if (currentPage >= totalPages - 3) {
                    pageNum = totalPages - 6 + i;
                  } else {
                    pageNum = currentPage - 3 + i;
                  }
                  
                  return (
                    <PaginationButton
                      key={pageNum}
                      active={currentPage === pageNum}
                      onClick={() => handlePageChange(pageNum)}
                    >
                      {pageNum}
                    </PaginationButton>
                  );
                })}
                
                <ArrowButton 
                  onClick={() => handlePageChange(Math.min(totalPages, currentPage + 1))}
                  disabled={currentPage === totalPages}
                >
                  ‚Üí
                </ArrowButton>
              </PaginationContainer>
            )}
          </>
        )}
      </ContentWrapper>
    </PageContainer>
  );
};

export default SupportList;