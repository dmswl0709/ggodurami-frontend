// pages/ReportDetail.tsx
import React, { useEffect, useState } from 'react';
import styled from 'styled-components';
import { Logo } from '../Components/Logo/Logo';
import Map from '../Components/Map/Map';
import { useNavigate } from "react-router-dom";

const PageContainer = styled.div`
  min-height: 100vh;
  background-color: #FFEFD5;
  padding: 5px 0;
`;

const Header = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: flex-start;
  margin-bottom: 5px;
  padding: 0 10px;
  max-width: 1200px;
  margin: 0 auto 5px auto;
  
  @media (max-width: 1024px) {
    max-width: 95%;
    margin-bottom: 3px;
    padding: 0 15px;
  }
  
  @media (max-width: 768px) {
    margin-bottom: 2px;
    padding: 0 10px;
  }
  
  @media (max-width: 480px) {
    margin-bottom: 1px;
    padding: 0 5px;
  }
`;

const LogoContainer = styled.div`
  margin-top: 2px;
  margin-bottom: -50px;
  
  @media (max-width: 768px) {
    margin-top: 1px;
  }
  
  @media (max-width: 480px) {
    margin-top: 1px;
  }
`;

const HeaderTitle = styled.h1`
  font-size: 25px;
  font-weight: 700;
  color: #333;
  margin: 15px 0 0 40px;
  text-align: left;
  
  @media (max-width: 1024px) {
    font-size: 28px;
    margin: 12px 0 0 40px;
  }
  
  @media (max-width: 768px) {
    font-size: 24px;
    margin: 10px 0 0 40px;
  }
  
  @media (max-width: 480px) {
    font-size: 22px;
    margin: 8px 0 0 50px;
  }
`;

const MapContainer = styled.div`
  width: 100%;
  height: 450px;
  margin-bottom: 30px;
  border-radius: 12px;
  overflow: hidden;
  max-width: 1200px;
  margin: 0 auto 30px auto;
  padding: 0 20px;
  box-sizing: border-box;
  
  iframe, 
  > div {
    width: 100% !important;
    height: 100% !important;
  }
  
  @media (max-width: 1024px) {
    max-width: 95%;
    height: 400px;
    padding: 0 15px;
    margin: 0 auto 25px auto;
  }
  
  @media (max-width: 768px) {
    height: 350px;
    padding: 0 10px;
    margin: 0 auto 20px auto;
  }
  
  @media (max-width: 480px) {
    height: 280px;
    padding: 0 5px;
    margin: 0 auto 15px auto;
  }
`;

const ContentWrapper = styled.div`
  background-color: white;
  border-radius: 16px;
  padding: 50px;
  width: 60vw;
  margin: 0 auto 40px auto;
  box-sizing: border-box;
  
  @media (max-width: 768px) {
    width: 95vw;
    padding: 30px 20px;
    margin: 0 auto;
  }
  
  @media (max-width: 480px) {
    width: 98vw;
    padding: 25px 15px;
    margin: 0 auto;
  }
`;

const InfoSection = styled.div`
  margin-bottom: 35px;
  
  @media (max-width: 1024px) {
    margin-bottom: 30px;
  }
  
  @media (max-width: 768px) {
    margin-bottom: 25px;
  }
  
  @media (max-width: 480px) {
    margin-bottom: 20px;
  }
`;

const InfoItem = styled.div`
  display: flex;
  align-items: flex-start;
  margin-bottom: 18px;
  
  @media (max-width: 768px) {
    margin-bottom: 15px;
  }
  
  @media (max-width: 480px) {
    flex-direction: column;
    margin-bottom: 12px;
  }
`;

const InfoLabel = styled.span`
  font-size: 18px;
  font-weight: 600;
  color: #333;
  min-width: 140px;
  margin-right: 15px;
  
  @media (max-width: 1024px) {
    font-size: 17px;
    min-width: 130px;
    margin-right: 12px;
  }
  
  @media (max-width: 768px) {
    font-size: 16px;
    min-width: 120px;
    margin-right: 10px;
  }
  
  @media (max-width: 480px) {
    font-size: 15px;
    margin-bottom: 5px;
    min-width: auto;
    margin-right: 0;
  }
`;

const InfoValue = styled.span`
  font-size: 18px;
  color: #555;
  line-height: 1.5;
  
  @media (max-width: 1024px) {
    font-size: 17px;
  }
  
  @media (max-width: 768px) {
    font-size: 16px;
  }
  
  @media (max-width: 480px) {
    font-size: 15px;
  }
`;

const ImageSection = styled.div`
  margin-bottom: 35px;
  
  @media (max-width: 1024px) {
    margin-bottom: 30px;
  }
  
  @media (max-width: 768px) {
    margin-bottom: 25px;
  }
  
  @media (max-width: 480px) {
    margin-bottom: 20px;
  }
`;

const ImageLabelContainer = styled.div`
  display: flex;
  align-items: flex-start;
  margin-bottom: 18px;
  
  @media (max-width: 768px) {
    margin-bottom: 15px;
  }
  
  @media (max-width: 480px) {
    flex-direction: column;
    margin-bottom: 12px;
  }
`;

const ImageContainer = styled.div`
  width: 100%;
  max-width: 500px;
  margin: 0 auto;
  text-align: center;
  
  @media (max-width: 1024px) {
    max-width: 450px;
  }
  
  @media (max-width: 768px) {
    max-width: 400px;
  }
  
  @media (max-width: 480px) {
    max-width: 100%;
  }
`;

const ReportImage = styled.img`
  width: 100%;
  height: auto;
  border-radius: 12px;
  border: 2px solid #ddd;
  margin-bottom: 12px;
`;

const ImageCaption = styled.p`
  font-size: 16px;
  color: #666;
  margin: 0;
  
  @media (max-width: 1024px) {
    font-size: 15px;
  }
  
  @media (max-width: 768px) {
    font-size: 14px;
  }
  
  @media (max-width: 480px) {
    font-size: 13px;
  }
`;

const DetailSection = styled.div`
  margin-top: 25px;
  
  @media (max-width: 768px) {
    margin-top: 20px;
  }
  
  @media (max-width: 480px) {
    margin-top: 15px;
  }
`;

const DetailContent = styled.p`
  font-size: 18px;
  color: #555;
  line-height: 1.6;
  margin: 0;
  
  @media (max-width: 1024px) {
    font-size: 17px;
  }
  
  @media (max-width: 768px) {
    font-size: 16px;
  }
  
  @media (max-width: 480px) {
    font-size: 15px;
  }
`;

const LoadingContainer = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 50vh;
  font-size: 18px;
  color: #666;
`;

const ErrorContainer = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  min-height: 50vh;
  font-size: 18px;
  color: #e74c3c;
  text-align: center;
`;

// üî• AI ÏßÑÎã® Í≤∞Í≥º Í¥ÄÎ†® Ïä§ÌÉÄÏùº
const AISection = styled.div`
  margin-bottom: 35px;
  
  @media (max-width: 1024px) {
    margin-bottom: 30px;
  }
  
  @media (max-width: 768px) {
    margin-bottom: 25px;
  }
  
  @media (max-width: 480px) {
    margin-bottom: 20px;
  }
`;

const AIResultContainer = styled.div`
  background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
  border: 2px solid #007bff;
  border-radius: 12px;
  padding: 20px;
  margin-top: 10px;
  position: relative;
  
  @media (max-width: 768px) {
    padding: 16px;
  }
  
  @media (max-width: 480px) {
    padding: 14px;
  }
`;

const AIBadge = styled.div`
  position: absolute;
  top: -10px;
  left: 20px;
  background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
  color: white;
  padding: 4px 12px;
  border-radius: 20px;
  font-size: 12px;
  font-weight: 600;
  box-shadow: 0 2px 8px rgba(0, 123, 255, 0.3);
`;

const AIResultItem = styled.div`
  display: flex;
  align-items: flex-start;
  margin-bottom: 12px;
  
  &:last-child {
    margin-bottom: 0;
  }
  
  @media (max-width: 480px) {
    flex-direction: column;
    margin-bottom: 10px;
  }
`;

const AILabel = styled.span`
  font-size: 16px;
  font-weight: 600;
  color: #495057;
  min-width: 120px;
  margin-right: 12px;
  
  @media (max-width: 1024px) {
    font-size: 15px;
    min-width: 110px;
  }
  
  @media (max-width: 768px) {
    font-size: 14px;
    min-width: 100px;
  }
  
  @media (max-width: 480px) {
    font-size: 14px;
    margin-bottom: 4px;
    min-width: auto;
    margin-right: 0;
  }
`;

const AIValue = styled.span`
  font-size: 16px;
  color: #212529;
  font-weight: 500;
  
  @media (max-width: 1024px) {
    font-size: 15px;
  }
  
  @media (max-width: 768px) {
    font-size: 14px;
  }
  
  @media (max-width: 480px) {
    font-size: 14px;
  }
`;

const ConfidenceBar = styled.div<{ confidence: number }>`
  width: 100%;
  height: 8px;
  background-color: #e9ecef;
  border-radius: 4px;
  margin-top: 6px;
  overflow: hidden;
  
  &::after {
    content: '';
    display: block;
    height: 100%;
    width: ${props => props.confidence}%;
    background: linear-gradient(90deg, 
      ${props => props.confidence >= 80 ? '#28a745' : 
        props.confidence >= 60 ? '#ffc107' : '#dc3545'} 0%, 
      ${props => props.confidence >= 80 ? '#20c997' : 
        props.confidence >= 60 ? '#fd7e14' : '#e74c3c'} 100%);
    border-radius: 4px;
    transition: width 0.3s ease;
  }
`;

const NoAIResult = styled.div`
  text-align: center;
  color: #6c757d;
  font-style: italic;
  padding: 15px;
  background-color: #f8f9fa;
  border-radius: 8px;
  border: 1px dashed #dee2e6;
`;

// üî• ÌÉÄÏûÖ Ï†ïÏùò
interface ReportData {
  title: string;
  main_category: string;
  sub_category: string;
  latitude: string;
  longitude: string;
  id?: string;
}

interface ReportDetailData {
  user_id: string;
  username: string;
  main_category: string;
  sub_category: string;
  title: string;
  content: string;
  local: string;
  latitude: string;
  longitude: string;
  files: string[];
  created_at: string;
  id: string;
}

interface AIDetectionResult {
  category: string;
  total_detections: number;
  detections: Array<{
    class_id: number;
    class_name: string;
    confidence: number;
    bbox: {
      x1: number;
      y1: number;
      x2: number;
      y2: number;
    };
  }>;
  primary_detection: {
    class_id: number;
    class_name: string;
    confidence: number;
    bbox: {
      x1: number;
      y1: number;
      x2: number;
      y2: number;
    };
  } | null;
}

interface ApiResponse {
  reports: ReportData[];
}

// üî• Ïú†Ìã∏Î¶¨Ìã∞ Ìï®ÏàòÎì§
const getFileUrl = (filePath: string): string => {
  if (!filePath) return '';
  
  if (filePath.startsWith('http://') || filePath.startsWith('https://')) {
    return filePath;
  }
  
  if (filePath.startsWith('/static')) {
    return `http://baekend.onrender.com${filePath}`;
  }
  
  return `http://baekend.onrender.com/static/uploads/reports/${filePath}`;
};

// üî• ÏàòÏ†ïÎêú AI ÏßÑÎã® Í≤∞Í≥º ÌëúÏãú Ïª¥Ìè¨ÎÑåÌä∏
const AIResultDisplay: React.FC<{ 
  aiResult: AIDetectionResult | null; 
  loading: boolean; 
  error?: string | null;
}> = ({ aiResult, loading, error }) => {
  // Î°úÎî© Ï§ëÏùº Îïå
  if (loading) {
    return (
      <AIResultContainer>
        <AIBadge>AI Î∂ÑÏÑù</AIBadge>
        <div style={{ textAlign: 'center', color: '#666', padding: '20px 0' }}>
          ü§ñ AIÍ∞Ä Ïù¥ÎØ∏ÏßÄÎ•º Î∂ÑÏÑùÌïòÎäî Ï§ë...
        </div>
      </AIResultContainer>
    );
  }

  // ÏóêÎü¨Í∞Ä ÏûàÏùÑ Îïå
  if (error) {
    return (
      <NoAIResult>
        <div style={{ marginBottom: '10px' }}>‚ö†Ô∏è AI ÏßÑÎã® Ï§ë Ïò§Î•ò Î∞úÏÉù</div>
        <div style={{ fontSize: '12px', color: '#999' }}>{error}</div>
      </NoAIResult>
    );
  }

  // AI Í≤∞Í≥ºÍ∞Ä ÏóÜÍ±∞ÎÇò nullÏùº Îïå
  if (!aiResult) {
    return (
      <NoAIResult>
        ü§ñ AI ÏßÑÎã® Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§
      </NoAIResult>
    );
  }

  // primary_detectionÏù¥ ÏóÜÍ±∞ÎÇò nullÏùº Îïå
  if (!aiResult.primary_detection) {
    return (
      <NoAIResult>
        ü§ñ AIÍ∞Ä Î≥ëÌï¥Ï∂©ÏùÑ ÌÉêÏßÄÌïòÏßÄ Î™ªÌñàÏäµÎãàÎã§
      </NoAIResult>
    );
  }

  // Ï†ïÏÉÅÏ†ÅÏù∏ AI Í≤∞Í≥º ÌëúÏãú
  try {
    const confidencePercentage = Math.round(aiResult.primary_detection.confidence * 100);

    return (
      <AIResultContainer>
        <AIBadge>AI Î∂ÑÏÑù</AIBadge>
        
        <AIResultItem>
          <AILabel>ÌÉêÏßÄ Ïπ¥ÌÖåÍ≥†Î¶¨:</AILabel>
          <AIValue>{aiResult.category || 'Ïïå Ïàò ÏóÜÏùå'}</AIValue>
        </AIResultItem>
        
        <AIResultItem>
          <AILabel>Ï£ºÏöî ÏßÑÎã®:</AILabel>
          <AIValue>{aiResult.primary_detection.class_name || 'Ïïå Ïàò ÏóÜÏùå'}</AIValue>
        </AIResultItem>
        
        <AIResultItem>
          <AILabel>Ïã†Î¢∞ÎèÑ:</AILabel>
          <div style={{ flex: 1 }}>
            <AIValue>{confidencePercentage}%</AIValue>
            <ConfidenceBar confidence={confidencePercentage} />
          </div>
        </AIResultItem>
        
        <AIResultItem>
          <AILabel>Ï¥ù ÌÉêÏßÄ Ïàò:</AILabel>
          <AIValue>{aiResult.total_detections || 0}Í∞ú</AIValue>
        </AIResultItem>
        
        {aiResult.detections && aiResult.detections.length > 1 && (
          <AIResultItem style={{ flexDirection: 'column', alignItems: 'flex-start' }}>
            <AILabel style={{ marginBottom: '8px' }}>Ï∂îÍ∞Ä ÌÉêÏßÄ Í≤∞Í≥º:</AILabel>
            <div style={{ width: '100%' }}>
              {aiResult.detections.slice(1).map((detection, index) => (
                <div key={index} style={{ 
                  display: 'flex', 
                  justifyContent: 'space-between', 
                  alignItems: 'center',
                  padding: '4px 0',
                  fontSize: '14px',
                  color: '#6c757d'
                }}>
                  <span>{detection.class_name || 'Ïïå Ïàò ÏóÜÏùå'}</span>
                  <span>{Math.round((detection.confidence || 0) * 100)}%</span>
                </div>
              ))}
            </div>
          </AIResultItem>
        )}
      </AIResultContainer>
    );
  } catch (renderError) {
    console.error('AI Í≤∞Í≥º Î†åÎçîÎßÅ Ïò§Î•ò:', renderError);
    return (
      <NoAIResult>
        <div style={{ marginBottom: '10px' }}>‚ö†Ô∏è AI Í≤∞Í≥º ÌëúÏãú Ï§ë Ïò§Î•ò Î∞úÏÉù</div>
        <div style={{ fontSize: '12px', color: '#999' }}>Í≤∞Í≥º Îç∞Ïù¥ÌÑ∞ ÌòïÏãùÏù¥ Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§</div>
      </NoAIResult>
    );
  }
};

// üî• Ïù¥ÎØ∏ÏßÄ ÌëúÏãú Ïª¥Ìè¨ÎÑåÌä∏
const ImageDisplay: React.FC<{ files: string[] }> = ({ files }) => {
  if (!files || files.length === 0) {
    return (
      <div style={{
        padding: '40px 20px',
        backgroundColor: '#f8f9fa',
        border: '2px dashed #dee2e6',
        borderRadius: '12px',
        textAlign: 'center',
        color: '#6c757d',
        fontSize: '14px'
      }}>
        <div style={{ marginBottom: '10px' }}>üì∑</div>
        <div>Ï≤®Î∂ÄÎêú ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§</div>
      </div>
    );
  }

  return (
    <div>
      {files.map((file, index) => {
        const fileUrl = getFileUrl(file);
        console.log(`üñºÔ∏è Ïù¥ÎØ∏ÏßÄ ${index + 1} URL:`, fileUrl);
        
        return (
          <div key={index} style={{ marginBottom: '15px' }}>
            <ReportImage 
              src={fileUrl}
              alt={`Ïã†Í≥† Ï≤®Î∂Ä ÌååÏùº ${index + 1}`}
              onLoad={() => {
                console.log(`‚úÖ Ïù¥ÎØ∏ÏßÄ ${index + 1} Î°úÎìú ÏÑ±Í≥µ:`, fileUrl);
              }}
              onError={(e) => {
                console.error(`‚ùå Ïù¥ÎØ∏ÏßÄ ${index + 1} Î°úÎìú Ïã§Ìå®:`, fileUrl);
                
                const target = e.target as HTMLImageElement;
                target.style.display = 'none';
                
                const errorDiv = document.createElement('div');
                errorDiv.style.cssText = `
                  padding: 40px 20px;
                  background-color: #f8f9fa;
                  border: 2px dashed #dee2e6;
                  border-radius: 12px;
                  text-align: center;
                  color: #6c757d;
                  font-size: 14px;
                `;
                errorDiv.innerHTML = `
                  <div style="margin-bottom: 10px;">üì∑</div>
                  <div>Ïù¥ÎØ∏ÏßÄÎ•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§</div>
                  <div style="font-size: 12px; margin-top: 5px; color: #999;">
                    URL: ${fileUrl}
                  </div>
                  <div style="font-size: 11px; margin-top: 5px; color: #999;">
                    ÏõêÎ≥∏ Í≤ΩÎ°ú: ${file}
                  </div>
                `;
                
                target.parentNode?.insertBefore(errorDiv, target.nextSibling);
              }}
            />
            <ImageCaption>Ï≤®Î∂Ä ÌååÏùº {index + 1}</ImageCaption>
          </div>
        );
      })}
    </div>
  );
};

// üî• API Ìï®ÏàòÎì§
const fetchRecentReports = async (): Promise<ApiResponse> => {
  try {
    console.log('üîÑ Ïã†Í≥† Î™©Î°ù Ï°∞Ìöå ÏãúÏûë...');
    
    const response = await fetch('http://baekend.onrender.com/reports/recent', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      mode: 'cors',
    });
    
    console.log('API ÏùëÎãµ ÏÉÅÌÉú:', response.status);
    
    if (!response.ok) {
      console.warn(`API Ìò∏Ï∂ú Ïã§Ìå®: ${response.status}. Î™©ÏóÖ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©.`);
      return getMockData();
    }

    const contentType = response.headers.get('content-type');
    if (!contentType || !contentType.includes('application/json')) {
      console.warn('JSON ÏùëÎãµÏù¥ ÏïÑÎãò. Î™©ÏóÖ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©.');
      return getMockData();
    }

    const data = await response.json();
    console.log('‚úÖ Ïã†Í≥† Î™©Î°ù Ï°∞Ìöå ÏÑ±Í≥µ:', data);
    return data;
  } catch (error) {
    console.error('‚ùå API Ìò∏Ï∂ú Ïã§Ìå®:', error);
    console.log('üîÑ Î™©ÏóÖ Îç∞Ïù¥ÌÑ∞Î°ú ÎåÄÏ≤¥');
    return getMockData();
  }
};

const fetchReportDetail = async (reportId: string): Promise<ReportDetailData | null> => {
  try {
    console.log(`üîç Ïã†Í≥† ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå: ${reportId}`);
    
    // üî• Ïó¨Îü¨ Í∞ÄÎä•Ìïú ÏóîÎìúÌè¨Ïù∏Ìä∏Î•º ÏãúÎèÑ
    const possibleEndpoints = [
      `http://baekend.onrender.com/damage-report/${reportId}`,
      `http://baekend.onrender.com/reports/${reportId}`,
      `http://baekend.onrender.com/report/${reportId}`,
      `http://baekend.onrender.com/damage-reports/${reportId}`
    ];
    
    for (const endpoint of possibleEndpoints) {
      try {
        console.log(`üîÑ ÏãúÎèÑ Ï§ëÏù∏ ÏóîÎìúÌè¨Ïù∏Ìä∏: ${endpoint}`);
        
        const response = await fetch(endpoint, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
          },
          mode: 'cors',
        });
        
        console.log(`üì° ${endpoint} ÏùëÎãµ ÏÉÅÌÉú: ${response.status}`);
        
        if (response.ok) {
          const data = await response.json();
          console.log('‚úÖ Ïã†Í≥† ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå ÏÑ±Í≥µ:', data);
          return data;
        } else if (response.status === 404) {
          console.log(`‚ùå ${endpoint}ÏóêÏÑú 404 - Îã§Ïùå ÏóîÎìúÌè¨Ïù∏Ìä∏ ÏãúÎèÑ`);
          continue;
        } else {
          console.warn(`‚ö†Ô∏è ${endpoint}ÏóêÏÑú ${response.status} Ïò§Î•ò`);
          continue;
        }
      } catch (endpointError) {
        console.error(`‚ùå ${endpoint} Ìò∏Ï∂ú Ïã§Ìå®:`, endpointError);
        continue;
      }
    }
    
    console.warn('‚ùå Î™®Îì† ÏóîÎìúÌè¨Ïù∏Ìä∏ÏóêÏÑú Ïã†Í≥† ÏÉÅÏÑ∏ Ï°∞Ìöå Ïã§Ìå®');
    return null;
  } catch (error) {
    console.error('‚ùå Ïã†Í≥† ÏÉÅÏÑ∏ Ï°∞Ìöå Ïã§Ìå®:', error);
    return null;
  }
};

// üî• ÏàòÏ†ïÎêú AI ÏßÑÎã® API Ìï®Ïàò
const fetchAIDiagnosis = async (reportId: string): Promise<{ 
  result: AIDetectionResult | null; 
  error?: string | null 
}> => {
  try {
    console.log(`ü§ñ AI ÏßÑÎã® ÏöîÏ≤≠: ${reportId}`);
    
    const response = await fetch(`http://baekend.onrender.com/damage-report/detect-damage/${reportId}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      mode: 'cors',
    });
    
    console.log('AI ÏßÑÎã® ÏùëÎãµ ÏÉÅÌÉú:', response.status);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.warn(`‚ùå AI diagnosis API failed with status: ${response.status}, body: ${errorText}`);
      
      let errorMessage = 'AI ÏßÑÎã® ÏÑúÎπÑÏä§Ïóê Ïó∞Í≤∞Ìï† Ïàò ÏóÜÏäµÎãàÎã§';
      if (response.status === 404) {
        errorMessage = 'Ìï¥Îãπ Ïã†Í≥†Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§';
      } else if (response.status === 500) {
        errorMessage = 'AI Î∂ÑÏÑù Ï§ë ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§';
      } else if (response.status >= 400 && response.status < 500) {
        errorMessage = 'ÏûòÎ™ªÎêú ÏöîÏ≤≠ÏûÖÎãàÎã§';
      }
      
      return { result: null, error: errorMessage };
    }

    const data = await response.json();
    console.log('AI ÏßÑÎã® ÏùëÎãµ Îç∞Ïù¥ÌÑ∞:', data);
    
    // ÏóêÎü¨ ÏùëÎãµ Ï≤òÎ¶¨
    if (data.error) {
      console.warn(`‚ùå AI ÏßÑÎã® ÏóêÎü¨: ${data.error}`);
      return { result: null, error: data.error };
    }
    
    // Îπà Í≤∞Í≥º Ï≤òÎ¶¨
    if (!data || typeof data !== 'object') {
      console.warn('‚ùå AI ÏßÑÎã® Í≤∞Í≥º ÌòïÏãù Ïò§Î•ò');
      return { result: null, error: 'ÏùëÎãµ Îç∞Ïù¥ÌÑ∞ ÌòïÏãùÏù¥ Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§' };
    }
    
    // primary_detectionÏù¥ ÏóÜÎäî Í≤ΩÏö∞ Ï≤òÎ¶¨
    if (!data.primary_detection) {
      console.log('‚ÑπÔ∏è AI ÏßÑÎã® ÏôÑÎ£å - ÌÉêÏßÄ Í≤∞Í≥º ÏóÜÏùå');
      return { result: { ...data, primary_detection: null }, error: null };
    }
    
    console.log('‚úÖ AI ÏßÑÎã® ÏÑ±Í≥µ:', data);
    return { result: data, error: null };
    
  } catch (error) {
    console.error('‚ùå AI ÏßÑÎã® ÏöîÏ≤≠ Ïã§Ìå®:', error);
    
    let errorMessage = 'AI ÏßÑÎã® Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§';
    if (error instanceof TypeError && error.message.includes('fetch')) {
      errorMessage = 'ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî';
    } else if (error instanceof Error) {
      errorMessage = error.message;
    }
    
    return { result: null, error: errorMessage };
  }
};

const getMockData = (): ApiResponse => {
  console.log('üìã Î™©ÏóÖ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©');
  return {
    reports: [
      {
        title: "Îã§Ï†ÄÎ≤åÏïÖ",
        main_category: "Î≥ëÌï¥Ï∂©",
        sub_category: "Î≥ëÌï¥",
        latitude: "35.7336908241694",
        longitude: "127.06573190851746",
        id: "mock_report_1"
      },
      {
        title: "Ï†úÏ£ºÎèÑ ÌÉúÌíç",
        main_category: "Ïû¨ÎÇú",
        sub_category: "ÌÉúÌíç",
        latitude: "33.2375195759578",
        longitude: "126.515860406201",
        id: "mock_report_2"
      },
      {
        title: "Ï†ÑÏ£º ÏßÄÏßÑ Î∞úÏÉù",
        main_category: "Ïû¨ÎÇú",
        sub_category: "ÏßÄÏßÑ",
        latitude: "37.5665",
        longitude: "126.978",
        id: "mock_report_3"
      }
    ]
  };
};

// üî• Î©îÏù∏ Ïª¥Ìè¨ÎÑåÌä∏
export const ReportDetail: React.FC = () => {
  const [reportsData, setReportsData] = useState<ReportData[]>([]);
  const [selectedReportDetail, setSelectedReportDetail] = useState<ReportDetailData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [loadingDetail, setLoadingDetail] = useState(false);
  const [aiDiagnosis, setAiDiagnosis] = useState<AIDetectionResult | null>(null);
  const [loadingAI, setLoadingAI] = useState(false);
  const [aiError, setAiError] = useState<string | null>(null); // üî• AI ÏóêÎü¨ ÏÉÅÌÉú Ï∂îÍ∞Ä

  // üî• Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  useEffect(() => {
    const loadReports = async () => {
      try {
        setLoading(true);
        const data = await fetchRecentReports();
        setReportsData(data.reports || []);
        setError(null);
        
        console.log('Ïã†Í≥† Î™©Î°ù Î°úÎìú ÏôÑÎ£å:', data.reports);
      } catch (err) {
        setError('Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.');
        console.error('Ïã†Í≥† Î™©Î°ù Î°úÎìú Ï§ë ÏπòÎ™ÖÏ†Å Ïò§Î•ò:', err);
      } finally {
        setLoading(false);
      }
    };

    loadReports();
  }, []);

  // üî• ÏàòÏ†ïÎêú ÎßàÏª§ ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨
  const handleMarkerClick = async (reportId: string) => {
    console.log('üó∫Ô∏è ÎßàÏª§ ÌÅ¥Î¶≠:', reportId);
    
    if (!reportId) {
      console.warn('‚ùå Report IDÍ∞Ä ÏóÜÏäµÎãàÎã§');
      return;
    }

    // ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
    setLoadingDetail(true);
    setLoadingAI(false);
    setAiDiagnosis(null);
    setAiError(null); // AI ÏóêÎü¨ ÏÉÅÌÉúÎèÑ Ï¥àÍ∏∞Ìôî
    setSelectedReportDetail(null);
    
    try {
      if (reportId.startsWith('temp_') || reportId.startsWith('mock_')) {
        console.log('üé≠ Î™©ÏóÖ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©:', reportId);
        
        const mockDetail: ReportDetailData = {
          user_id: "mock_user_id",
          username: "ÌÖåÏä§Ìä∏ ÏÇ¨Ïö©Ïûê",
          main_category: "Î≥ëÌï¥Ï∂©",
          sub_category: "Ìï¥Ï∂©",
          title: reportId.includes('Îã§Ï†ÄÎ≤åÏïÖ') ? "Îã§Ï†ÄÎ≤åÏïÖ" : 
                 reportId.includes('ÌÉúÌíç') ? "Ï†úÏ£ºÎèÑ ÌÉúÌíç" :
                 reportId.includes('ÏßÄÏßÑ') ? "Ï†ÑÏ£º ÏßÄÏßÑ Î∞úÏÉù" : "ÌÖåÏä§Ìä∏ Ïã†Í≥†",
          content: `Ïù¥Í≤ÉÏùÄ ${reportId} Ïã†Í≥†Ïóê ÎåÄÌïú ÏÉÅÏÑ∏ ÎÇ¥Ïö©ÏûÖÎãàÎã§.`,
          local: "ÌÖåÏä§Ìä∏ ÏßÄÏó≠",
          latitude: "37.5665",
          longitude: "126.978",
          files: [],
          created_at: new Date().toISOString(),
          id: reportId
        };
        
        setSelectedReportDetail(mockDetail);
        
        // Î≥ëÌï¥Ï∂© Ïã†Í≥†Ïù∏ Í≤ΩÏö∞Îßå AI ÏßÑÎã® (Î™©ÏóÖ)
        if (mockDetail.main_category === "Î≥ëÌï¥Ï∂©") {
          setLoadingAI(true);
          setTimeout(() => {
            const mockAIResult: AIDetectionResult = {
              category: "Ìï¥Ï∂©",
              total_detections: 1,
              detections: [{
                class_id: 2,
                class_name: "Îã¥Î∞∞Í∞ÄÎ£®Ïù¥",
                confidence: 0.9696160554885864,
                bbox: {
                  x1: 90.16170501708984,
                  y1: 64.73558044433594,
                  x2: 161.48237609863282,
                  y2: 155.47138977050781
                }
              }],
              primary_detection: {
                class_id: 2,
                class_name: "Îã¥Î∞∞Í∞ÄÎ£®Ïù¥",
                confidence: 0.9696160554885864,
                bbox: {
                  x1: 90.16170501708984,
                  y1: 64.73558044433594,
                  x2: 161.48237609863282,
                  y2: 155.47138977050781
                }
              }
            };
            setAiDiagnosis(mockAIResult);
            setLoadingAI(false);
          }, 2000);
        }
      } else {
        // Ïã§Ï†ú API Ìò∏Ï∂ú
        console.log('üåê Ïã§Ï†ú API Ìò∏Ï∂ú ÏãúÏûë');
        const detail = await fetchReportDetail(reportId);
        
        if (detail) {
          setSelectedReportDetail(detail);
          console.log('‚úÖ Ïã†Í≥† ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Î°úÎìú ÏôÑÎ£å:', detail);
          
          // Î≥ëÌï¥Ï∂© Ïã†Í≥†Ïù∏ Í≤ΩÏö∞Îßå AI ÏßÑÎã® Ïã§Ìñâ
          if (detail.main_category === "Î≥ëÌï¥Ï∂©") {
            console.log('ü§ñ Î≥ëÌï¥Ï∂© Ïã†Í≥† Í∞êÏßÄ - AI ÏßÑÎã® ÏãúÏûë');
            setLoadingAI(true);
            
            try {
              const { result: aiResult, error: aiErrorMessage } = await fetchAIDiagnosis(reportId);
              setAiDiagnosis(aiResult);
              setAiError(aiErrorMessage || null);

              
              if (aiResult) {
                console.log('üéâ AI ÏßÑÎã® ÏÑ±Í≥µ:', aiResult);
              } else if (aiErrorMessage) {
                console.log('‚ö†Ô∏è AI ÏßÑÎã® ÏóêÎü¨:', aiErrorMessage);
              } else {
                console.log('‚ÑπÔ∏è AI ÏßÑÎã® ÏôÑÎ£å - ÌÉêÏßÄ Í≤∞Í≥º ÏóÜÏùå');
              }
            } catch (aiError) {
              console.error('AI ÏßÑÎã® Ï§ë ÏòàÏô∏ Î∞úÏÉù:', aiError);
              setAiDiagnosis(null);
              setAiError('AI ÏßÑÎã® Ï§ë ÏòàÏÉÅÏπò Î™ªÌïú Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§');
            } finally {
              setLoadingAI(false);
            }
          }
        } else {
          console.error('‚ùå Ïã†Í≥† ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Î°úÎìú Ïã§Ìå® - Î™©ÏóÖ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©');
          
          // üî• API Ïã§Ìå® Ïãú Î™©ÏóÖ Îç∞Ïù¥ÌÑ∞Î°ú ÎåÄÏ≤¥
          const fallbackDetail: ReportDetailData = {
            user_id: "fallback_user",
            username: "Ïã†Í≥†Ïûê",
            main_category: "Î≥ëÌï¥Ï∂©",
            sub_category: "Ìï¥Ï∂©",
            title: `Ïã†Í≥† ID: ${reportId}`,
            content: `API Ïó∞Í≤∞Ïóê Ïã§Ìå®ÌïòÏó¨ ÏûÑÏãú Îç∞Ïù¥ÌÑ∞Î•º ÌëúÏãúÌï©ÎãàÎã§. Ïã†Í≥† ID: ${reportId}`,
            local: "ÏúÑÏπò Ï†ïÎ≥¥ Î∂àÎ™Ö",
            latitude: "37.5665",
            longitude: "126.978",
            files: [],
            created_at: new Date().toISOString(),
            id: reportId
          };
          setSelectedReportDetail(fallbackDetail);
          
          // Î≥ëÌï¥Ï∂© Ïã†Í≥†Ïù∏ Í≤ΩÏö∞ Î™©ÏóÖ AI Í≤∞Í≥ºÎèÑ Ï†úÍ≥µ
          if (fallbackDetail.main_category === "Î≥ëÌï¥Ï∂©") {
            setLoadingAI(true);
            setTimeout(() => {
              const fallbackAIResult: AIDetectionResult = {
                category: "Ìï¥Ï∂©",
                total_detections: 1,
                detections: [{
                  class_id: 0,
                  class_name: "Ïïå Ïàò ÏóÜÎäî Î≥ëÌï¥Ï∂©",
                  confidence: 0.5,
                  bbox: { x1: 0, y1: 0, x2: 100, y2: 100 }
                }],
                primary_detection: {
                  class_id: 0,
                  class_name: "Ïïå Ïàò ÏóÜÎäî Î≥ëÌï¥Ï∂©",
                  confidence: 0.5,
                  bbox: { x1: 0, y1: 0, x2: 100, y2: 100 }
                }
              };
              setAiDiagnosis(fallbackAIResult);
              setLoadingAI(false);
            }, 1000);
          }
        }
      }
    } catch (error) {
      console.error('‚ùå ÎßàÏª§ ÌÅ¥Î¶≠ Ï≤òÎ¶¨ Ï§ë Ï†ÑÏ≤¥ Ïò§Î•ò:', error);
    } finally {
      setLoadingDetail(false);
    }
  };

  // üî• ÌååÏùº Ï†ïÎ≥¥ ÎîîÎ≤ÑÍπÖ
  useEffect(() => {
    if (selectedReportDetail) {
      console.log('=== ÏÑ†ÌÉùÎêú Ïã†Í≥† ÏÉÅÏÑ∏ Ï†ïÎ≥¥ ===');
      console.log('Ï†úÎ™©:', selectedReportDetail.title);
      console.log('ÌååÏùº Ï†ïÎ≥¥:', selectedReportDetail.files);
      console.log('ÌååÏùº Í∞úÏàò:', selectedReportDetail.files?.length || 0);
      
      if (selectedReportDetail.files && selectedReportDetail.files.length > 0) {
        selectedReportDetail.files.forEach((file, index) => {
          console.log(`ÌååÏùº ${index + 1}:`, file);
          console.log(`ÌååÏùº ${index + 1} URL:`, getFileUrl(file));
        });
      }
    }
  }, [selectedReportDetail]);

  if (loading) {
    return (
      <PageContainer>
        <LoadingContainer>
          Ïã†Í≥† Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...
        </LoadingContainer>
      </PageContainer>
    );
  }

  if (error) {
    return (
      <PageContainer>
        <ErrorContainer>
          <div>{error}</div>
        </ErrorContainer>
      </PageContainer>
    );
  }

  return (
    <PageContainer>
      <Header>
        <LogoContainer>
          <Logo />
        </LogoContainer>
        <HeaderTitle>Ïã†Í≥†ÏÉÅÌô© ÏÑ∏Î∂Ä ÌéòÏù¥ÏßÄ</HeaderTitle>
      </Header>
      
      <MapContainer>
        <Map reports={reportsData} onMarkerClick={handleMarkerClick} />
      </MapContainer>
      
      <ContentWrapper>
        {selectedReportDetail ? (
          <InfoSection>
            <InfoItem>
              <InfoLabel style={{ color: '#d32f2f', fontWeight: 700, fontSize: '20px' }}>
                üìã ÏÑ†ÌÉùÎêú Ïã†Í≥† ÏÉÅÏÑ∏ Ï†ïÎ≥¥
              </InfoLabel>
            </InfoItem>
            
            {loadingDetail ? (
              <DetailContent>ÏÉÅÏÑ∏ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</DetailContent>
            ) : (
              <>
                <InfoItem>
                  <InfoLabel>Ïã†Í≥† Ï†úÎ™©:</InfoLabel>
                  <InfoValue>{selectedReportDetail.title}</InfoValue>
                </InfoItem>
                
                <InfoItem>
                  <InfoLabel>Ïã†Í≥†Ïûê:</InfoLabel>
                  <InfoValue>{selectedReportDetail.username}</InfoValue>
                </InfoItem>
                
                <InfoItem>
                  <InfoLabel>Ïπ¥ÌÖåÍ≥†Î¶¨:</InfoLabel>
                  <InfoValue>
                    {selectedReportDetail.main_category}
                    {selectedReportDetail.sub_category && ` > ${selectedReportDetail.sub_category}`}
                  </InfoValue>
                </InfoItem>
                
                <InfoItem>
                  <InfoLabel>Î∞úÏÉù ÏßÄÏó≠:</InfoLabel>
                  <InfoValue>{selectedReportDetail.local}</InfoValue>
                </InfoItem>
                
                <InfoItem>
                  <InfoLabel>Ï¢åÌëú:</InfoLabel>
                  <InfoValue>
                    ÏúÑÎèÑ: {selectedReportDetail.latitude}, Í≤ΩÎèÑ: {selectedReportDetail.longitude}
                  </InfoValue>
                </InfoItem>
                
                <InfoItem>
                  <InfoLabel>Ïã†Í≥† ÏùºÏãú:</InfoLabel>
                  <InfoValue>
                    {new Date(selectedReportDetail.created_at).toLocaleString('ko-KR')}
                  </InfoValue>
                </InfoItem>
                
                <DetailSection>
                  <InfoItem>
                    <InfoLabel>Ïã†Í≥† ÎÇ¥Ïö©:</InfoLabel>
                  </InfoItem>
                  <DetailContent style={{ backgroundColor: '#f9f9f9', padding: '15px', borderRadius: '8px', marginTop: '10px' }}>
                    {selectedReportDetail.content}
                  </DetailContent>
                </DetailSection>
                
                {/* üî• AI ÏßÑÎã® Í≤∞Í≥º ÏÑπÏÖò - Î≥ëÌï¥Ï∂© Ïã†Í≥†Ïù∏ Í≤ΩÏö∞Îßå ÌëúÏãú */}
                {selectedReportDetail.main_category === "Î≥ëÌï¥Ï∂©" && (
                  <AISection>
                    <InfoItem>
                      <InfoLabel>ü§ñ AI ÏßÑÎã® Í≤∞Í≥º:</InfoLabel>
                    </InfoItem>
                    <AIResultDisplay 
                      aiResult={aiDiagnosis} 
                      loading={loadingAI} 
                      error={aiError}
                    />
                  </AISection>
                )}
                
                {/* üî• Ï≤®Î∂Ä ÌååÏùº ÌëúÏãú */}
                <ImageSection>
                  <ImageLabelContainer>
                    <InfoLabel>Ï≤®Î∂Ä ÌååÏùº:</InfoLabel>
                  </ImageLabelContainer>
                  <ImageContainer>
                    <ImageDisplay files={selectedReportDetail.files || []} />
                  </ImageContainer>
                </ImageSection>
              </>
            )}
          </InfoSection>
        ) : (
          <InfoSection>
            <InfoItem>
              <InfoLabel style={{ color: '#666', fontWeight: 600, fontSize: '18px' }}>
                üó∫Ô∏è Ïã§ÏãúÍ∞Ñ Ïã†Í≥† ÌòÑÌô©
              </InfoLabel>
            </InfoItem>
            <DetailContent style={{ textAlign: 'center', padding: '40px 20px', color: '#666' }}>
              ÏßÄÎèÑÏùò ÎßàÏª§Î•º ÌÅ¥Î¶≠ÌïòÎ©¥ Ìï¥Îãπ Ïã†Í≥†Ïùò ÏÉÅÏÑ∏ Ï†ïÎ≥¥Î•º ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§.
              <br />
              <br />
              <span style={{ fontSize: '14px', color: '#999' }}>
                üí° Îπ®Í∞ÑÏÉâ ÎßàÏª§: Ïû¨ÎÇú/Ïû¨Ìï¥ Ïã†Í≥† | ÌååÎûÄÏÉâ ÎßàÏª§: Î≥ëÌï¥Ï∂© Ïã†Í≥†
                <br />
                ü§ñ Î≥ëÌï¥Ï∂© Ïã†Í≥†Ïùò Í≤ΩÏö∞ AI ÏßÑÎã® Í≤∞Í≥ºÎèÑ Ìï®Íªò ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§.
              </span>
            </DetailContent>
          </InfoSection>
        )}

        {reportsData.length > 0 && (
          <DetailSection>
            <InfoItem>
              <InfoLabel>ÏµúÍ∑º Ïã†Í≥† ÌòÑÌô©:</InfoLabel>
            </InfoItem>
            <DetailContent>
              Ï¥ù {reportsData.length}Í±¥Ïùò Ïã†Í≥†Í∞Ä Ï†ëÏàòÎêòÏñ¥ ÏßÄÎèÑÏóê ÌëúÏãúÎêòÍ≥† ÏûàÏäµÎãàÎã§.
              {reportsData.some(report => report.latitude && report.longitude) && 
                ` (ÏúÑÏπò Ï†ïÎ≥¥Í∞Ä ÏûàÎäî Ïã†Í≥†: ${reportsData.filter(report => report.latitude && report.longitude).length}Í±¥)`
              }
              <br />
              <span style={{ fontSize: '14px', color: '#666', marginTop: '8px', display: 'inline-block' }}>
                ü§ñ Î≥ëÌï¥Ï∂© Í¥ÄÎ†® Ïã†Í≥†: {reportsData.filter(report => report.main_category === "Î≥ëÌï¥Ï∂©").length}Í±¥ (AI ÏßÑÎã® Í∞ÄÎä•)
              </span>
            </DetailContent>
          </DetailSection>
        )}
      </ContentWrapper>
    </PageContainer>
  );
};

export default ReportDetail;